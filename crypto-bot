import os
import logging
import asyncio
import nest_asyncio
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import aiohttp

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ Replit
nest_asyncio.apply()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ß–∏—Ç–∞–Ω–Ω—è API —Ç–æ–∫–µ–Ω—ñ–≤
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_KEY")

# –§—É—Ç–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
FOOTER = """
[–ë—ñ—Ä–∂—ñ](https://t.me/zarahovano/2738) ‚Ä¢ [–ü—Ä–æ–∫—Å—ñ](https://stableproxy.com/?r=OWCN20XR) ‚Ä¢ [–Æ—Ç—É–±](https://www.youtube.com/channel/UCCTNQRN8dr-YuLL-GEYPdcw) ‚Ä¢ [–ß–∞—Ç](https://t.me/+w2SAKBpzFDhhYTMy) ‚Ä¢ [–ö–∞—Ä—Ç–∞](https://t.me/zarahovano/3724)
"""

# –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–º—ñ–Ω–∏ –Ω–∞ Markdown-–≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è
LINKS = {
    "Binance": "[Binance](https://accounts.binance.com/uk-UA/register?ref=GKWWK7SB)",
    "ByBit": "[ByBit](https://partner.bybit.com/b/zarahovano)",
    "WhiteBIT": "[WhiteBit](https://whitebit.com/referral/bcb23ae8-a01a-455c-b104-b2728711d712)",
    "OKX": "[OKX](https://www.okx.com/join/7045895)",
    "MEXC": "[MEXC](https://m.mexc.com/auth/signup?inviteCode=1RSm3)",
    "Phemex": "[Phemex](https://phemex.com/register-vt1?referralCode=EB95B5)",
    "Bitget": "[Bitget](https://www.bitget.com/ru/referral/register?clacCode=XQU9UEFN)"
}

def format_steps(text: str) -> str:
    """–î–æ–¥–∞—î –µ–º–æ–¥–∑—ñ 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£ –ø–µ—Ä–µ–¥ –∫—Ä–æ–∫–∞–º–∏ —É —Ç–µ–∫—Å—Ç—ñ"""
    step_pattern = re.compile(r'(?<!\d)\b(\d+)\. ')
    return step_pattern.sub(lambda m: f"{m.group(1)}Ô∏è‚É£ ", text)

def replace_keywords(text: str) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–º—ñ–Ω—é—î –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–∞ Markdown-–≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞–Ω–Ω—è"""
    for word, link in LINKS.items():
        text = re.sub(rf"(?i)\b{re.escape(word)}\b", link, text)  
    return text

async def paraphrase_text(text: str) -> str:
    """–ü–µ—Ä–µ–ø–∏—Å—É—î —Ç–µ–∫—Å—Ç, —â–æ–± –≤—ñ–Ω –∑–≤—É—á–∞–≤ –ø—Ä–∏–≤–∞–±–ª–∏–≤–æ —Ç–∞ –∑—Ä–æ–∑—É–º—ñ–ª–æ"""
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {OPENROUTER_KEY}"}
    data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [{"role": "user", "content": f"–ü–µ—Ä–µ–ø–∏—à–∏ —Ü–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É —Å—Ç–∏–ª—ñ –ø—Ä–æ—î–∫—Ç—É –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É. –Ø–∫—â–æ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –ø–æ—Å—Ç—ñ —î –∫—Ä–æ–∫–∏, —Ç–æ –∑–∞–ª–∏—à —ó—Ö, –æ—Ñ–æ—Ä–º–∏–≤—à–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–º —Å–ø–∏—Å–∫–æ–º —è–∫–∏–π –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è —Ñ—Ä–∞–∑–æ—é '–©–æ —Ä–æ–±–∏–º–æ'. –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ —Å—Ç–∞–ª–∏–º: —Å–ø–æ—á–∞—Ç–∫—É –π–¥–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ–º—ñ—Ç–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ –µ–º–æ–¥–∑—ñ, –¥–∞–ª—ñ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç ‚Äî –ª–∞–∫–æ–Ω—ñ—á–Ω–∏–π, —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–π, –±–µ–∑ –∑–∞–π–≤–∏—Ö –µ–º–æ—Ü—ñ–π. –£–Ω–∏–∫–∞–π –∫–ª—ñ–∫–±–µ–π—Ç—É, —Ñ—Ä–∞–∑ –Ω–∞ –∫—à—Ç–∞–ª—Ç ¬´–ª—ñ—Ç–∞—î–º–æ üöÄ¬ª —á–∏ ¬´–ø–∞–º–ø–∏–º üçå¬ª, –ø–∏—à–∏ –∑—Ä–æ–∑—É–º—ñ–ª–æ, –∞–ª–µ –∑ –ø–æ–≤–∞–≥–æ—é –¥–æ —á–∏—Ç–∞—á–∞. –Ø–∫—â–æ —î —Ä–∏–∑–∏–∫–∏ –∞–±–æ —â–æ—Å—å –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–µ ‚Äî –∑–∞–∑–Ω–∞—á —Ü–µ, –Ω–µ –º–∞—Å–∫—É—é—á–∏. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—è—Å–Ω–∏—Ç–∏ —è–∫ –¥–æ–ª—É—á–∏—Ç–∏—Å—è –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ‚Äî –¥–∞–π –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø–æ –¥—ñ—è—Ö. –ó–∞–≤–µ—Ä—à—É–π –ø–æ—Å—Ç –æ–¥–Ω–∏–º —Ä–µ—á–µ–Ω–Ω—è–º-–≤–∏—Å–Ω–æ–≤–∫–æ–º: –≤–∞—Ä—Ç–æ, –Ω–µ –≤–∞—Ä—Ç–æ –∞–±–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ. –í—Å—ñ –Ω–∞–∑–≤–∏ –±—ñ—Ä–∂ —ñ –∫–æ–º–ø–∞–Ω—ñ–π –ø–∏—à–∏ –ª–∏—à–µ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –¥–æ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–≥–æ –Ω–µ–π–º—ñ–Ω–≥—É —ñ –≥—Ä–∞–º–∞—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ Binance, Bybit, KuCoin, OKX, Coinbase, Bitget. –ù–∞–∑–≤–∏ —Ç–æ–∫–µ–Ω—ñ–≤ –ø–µ—Ä–µ–¥–∞–≤–∞–π —É –∑–∞–≥–∞–ª—å–Ω–æ–ø—Ä–∏–π–Ω—è—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –≤–µ–ª–∏–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏ ‚Äî BTC, ETH, SOL, –∞–ª–µ –±–µ–∑ –Ω–∞–¥–º—ñ—Ä–Ω–æ–≥–æ –Ω–∞–≥–æ–ª–æ—Å—É. –Ø–∫—â–æ –ø—Ä–æ–µ–∫—Ç —Å—É–º–Ω—ñ–≤–Ω–∏–π ‚Äî –ø—Ä—è–º–æ —Å–∫–∞–∂–∏. –Ø–∫—â–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ —Ü—ñ–∫–∞–≤–∏–π, –∞–ª–µ –ø–æ–∫–∏ —â–æ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π ‚Äî –∑–∞–∑–Ω–∞—á, —â–æ –≤–∞—Ä—Ç–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏. –ü–∏—à–∏ –±–µ–∑ –∫–ª–æ—É–Ω–∞–¥–∏, –∞–ª–µ –∂–∏–≤–æ —ñ –ø–æ —Å—É—Ç—ñ. –°—É—Ç—å ‚Äî —è–∫—ñ—Å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–∞—É–¥–∏—Ç–æ—Ä—ñ—ó, —è–∫–∞ —Ü—ñ–Ω—É—î —Å—Ç–∏—Å–ª—ñ—Å—Ç—å, —á—ñ—Ç–∫—ñ—Å—Ç—å —ñ –∞–¥–µ–∫–≤–∞—Ç–Ω—ñ—Å—Ç—å. –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–æ—Å—Ç –¥–∞–ª—ñ: {text}"}]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as response:
            if response.status != 200:
                return "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é —Ç–µ–∫—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."

            result = await response.json()
            return result.get("choices", [{}])[0].get("message", {}).get("content", text)

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Å–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–ø–∏—Å—É—î, –¥–æ–¥–∞—î –º–∞—Ä–∫–æ–≤–∞–Ω—ñ –∫—Ä–æ–∫–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""
    user_text = update.message.text

    if not user_text:
        await update.message.reply_text("üîπ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É –∞–±–æ –π–æ–≥–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ –æ–±—Ä–æ–±–∏—Ç–∏.")
        return

    loading_message = await update.message.reply_text("‚è≥ –§–æ—Ä–º—É—é –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç... –ó–∞—á–µ–∫–∞–π—Ç–µ!")

    try:
        paraphrased_text = await paraphrase_text(user_text)
        formatted_text = format_steps(paraphrased_text)
        final_text = replace_keywords(formatted_text)

        await loading_message.edit_text(f"{final_text}\n\n{FOOTER}", parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        await loading_message.edit_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑ –æ–±—Ä–æ–±–∫–æ—é —Ç–µ–∫—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

async def start(update: Update, context: CallbackContext) -> None:
    """–ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    await update.message.reply_text("üöÄ –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —ñ —è –π–æ–≥–æ –ø–æ–∫—Ä–∞—â—É!")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await app.initialize()
    await app.run_polling()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())
